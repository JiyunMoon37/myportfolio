[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "안녕하세요",
    "section": "",
    "text": "데이터 분석 과제입니다."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "HW1",
    "section": "",
    "text": "Do it! 쉽게 배우는 파이썬 데이터 분석\n\n(p84) Q1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    '제품' : [\"사과\", \"딸기\", \"수박\"],\n    '가격' : [1800, 1500, 3000],\n    '판매량' : [24, 38, 13]\n})\n\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n(p84) Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\ncost_avg = sum(df[\"가격\"])/3\ncost_avg\n\n2100.0\n\n\n\nselling_avg = sum(df[\"판매량\"])/3\nselling_avg\n\n25.0\n\n\n\n\n(p115) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\ndf_mpg = pd.read_csv('data/mpg.csv')\ndf_mpg_copy = df_mpg.copy()\nprint(df_mpg_copy)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_mpg_copy = df_mpg_copy.rename(columns = {'cty' : 'city'})\ndf_mpg_copy = df_mpg_copy.rename(columns = {'hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_mpg_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n(p130) [분석 도전]\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmwt = pd.read_csv('data/midwest.csv')\nmwt.head()  #데이터 앞부분\nmwt.tail()  #데이터 뒷부분 \nmwt.shape   #행, 열 수\nmwt.info()  #속성\nmwt.describe()  #요약 통계량 \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmwt = mwt.rename(columns = {'poptotal' : 'total'})\nmwt = mwt.rename(columns = {'popasian' : 'asian'})\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmwt['asian_percentage'] = (mwt['asian'] / mwt['total']) * 100 #파생변수 추가 \n\nmwt['asian_percentage'].plot.hist()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ’large;, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nmean_asian_percentage = np.mean(mwt['asian_percentage'])\n\n#평균 초과하면 'large', 그 외에는 'small' 부여\nmwt['average standard'] = np.where(mwt['asian_percentage'] &gt; mean_asian_percentage,'large', 'small') \n\n\n\nQ5. ‘large’와 ’small’ 에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nmwt['average standard'].value_counts()\n\ncount_test = mwt['average standard'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw1.html#p84.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#p84.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "HW1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    '제품' : [\"사과\", \"딸기\", \"수박\"],\n    '가격' : [1800, 1500, 3000],\n    '판매량' : [24, 38, 13]\n})\n\ndf\nsum(df[\"가격\"])/3\nsum(df[\"판매량\"])/3\n\n25.0"
  },
  {
    "objectID": "index.html#홈페이지-첫-화면입니다",
    "href": "index.html#홈페이지-첫-화면입니다",
    "title": "안녕하세요",
    "section": "",
    "text": "데이터 분석 과제입니다."
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "HW2",
    "section": "",
    "text": "Do it! 쉽게 배우는 파이썬 데이터 분석\n\n(p144) mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nmpg = pd.read_csv('data/mpg.csv')\n#mpg\n\ndispl4 = mpg.query('displ &lt;= 4')\n#displ4\ndispl5 = mpg.query('displ &gt;= 5')\n#displ5\n\nmean_4 = displ4['hwy'].mean()\n#mean_4\nmean_5 = displ5['hwy'].mean()\n#mean_5\n\nmax_mean_hwy = max(mean_4, mean_5)\nmax_mean_hwy\n\nnp.float64(25.96319018404908)\n\n\ndispl이 4이하인 자동차의 hwy 평균이 더 높다는 것을 알 수 있다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\n#audi\ntoyota = mpg.query('manufacturer == \"toyota\"')\n#toyota\n\naudi_cty = audi['cty'].mean()\n#audi_cty\ntoyota_cty = toyota['cty'].mean()\n#toyota_cty\n\nmax_cty = max(audi_cty, toyota_cty)\nmax_cty\n\nnp.float64(18.529411764705884)\n\n\ntotota의 cty 평균이 더 크다는 것을 알 수 있다.\nQ3. ‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\n#chevrolet = mpg.query('manufacturer == \"chevrolet\"')\n#ford = mpg.query('manufacturer == \"ford\"')\n#honda = mpg.query('manufacturer == \"honda\"')\n\nthree_car_hwy = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nthree_car_hwy\nthree_car_hwy['hwy'].mean()\n\nnp.float64(22.50943396226415)\n\n\n\n\n(p153) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\naudi_hwy = audi.sort_values('hwy', ascending = False)\naudi_hwy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n(p158) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy() #복사\n\nmpg2[\"합산 연비 변수\"] = mpg2[\"cty\"] + mpg2[\"hwy\"]\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ‘합산 연비 변수’를 2로 나눠 ’평균 연비 변수’ 를 추가하세요.\n\nmpg2[\"평균 연비 변수\"] = (mpg2[\"합산 연비 변수\"] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n평균 연비 변수\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmean_data = mpg2.sort_values('평균 연비 변수', ascending = False)\nmean_data.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n평균 연비 변수\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nlast = mpg.assign(\n    합산_연비_변수 = lambda x : x[\"cty\"] + x[\"hwy\"],\n    평균_연비_변수 = lambda x : x[\"합산_연비_변수\"] / 2) \\\n    .sort_values('평균_연비_변수', ascending = False)\n    \nlast.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산_연비_변수\n평균_연비_변수\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS 빅데이터 스쿨 HW2",
    "section": "",
    "text": "Do it! 쉽게 배우는 파이썬 데이터 분석\n\n(p144) mpg 데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nimport pandas as pd\nmpg = pd.read_csv('data/mpg.csv')\n\ndispl4 = mpg.query('displ &lt;= 4')\ndispl5 = mpg.query('displ &gt;= 5')\n\nmean_4 = displ4['hwy'].mean()\nmean_5 = displ5['hwy'].mean()\n\nmax_mean_hwy = max(mean_4, mean_5)\nmax_mean_hwy\n\nnp.float64(25.96319018404908)\n\n\ndispl이 4이하인 자동차의 hwy 평균이 더 높다는 것을 알 수 있다.\nQ2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\naudi_cty = audi['cty'].mean()\ntoyota_cty = toyota['cty'].mean()\n\nmax_cty = max(audi_cty, toyota_cty)\nmax_cty\n\nnp.float64(18.529411764705884)\n\n\ntotota의 cty 평균이 더 크다는 것을 알 수 있다.\nQ3. ‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nthree_car_hwy = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nthree_car_hwy\nthree_car_hwy['hwy'].mean()\n\nnp.float64(22.50943396226415)\n\n\n\n\n(p153) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\naudi = mpg.query('manufacturer == \"audi\"')\naudi_hwy = audi.sort_values('hwy', ascending = False)\naudi_hwy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact\n\n\n\n\n\n\n\n\n\n(p158) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg2 = mpg.copy() #복사\n\nmpg2[\"합산 연비 변수\"] = mpg2[\"cty\"] + mpg2[\"hwy\"]\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\nQ2. 앞에서 만든 ‘합산 연비 변수’를 2로 나눠 ’평균 연비 변수’ 를 추가하세요.\n\nmpg2[\"평균 연비 변수\"] = (mpg2[\"합산 연비 변수\"] / 2)\nmpg2.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n평균 연비 변수\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmean_data = mpg2.sort_values('평균 연비 변수', ascending = False)\nmean_data.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산 연비 변수\n평균 연비 변수\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nlast = mpg.assign(\n    합산_연비_변수 = lambda x : x[\"cty\"] + x[\"hwy\"],\n    평균_연비_변수 = lambda x : x[\"합산_연비_변수\"] / 2) \\\n    .sort_values('평균_연비_변수', ascending = False)\n    \nlast.head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n합산_연비_변수\n평균_연비_변수\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS 빅데이터 스쿨 HW1",
    "section": "",
    "text": "Do it! 쉽게 배우는 파이썬 데이터 분석\n\n(p84) Q1. 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    '제품' : [\"사과\", \"딸기\", \"수박\"],\n    '가격' : [1800, 1500, 3000],\n    '판매량' : [24, 38, 13]\n})\n\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n(p84) Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\ncost_avg = sum(df[\"가격\"])/3\ncost_avg\n\n2100.0\n\n\n\nselling_avg = sum(df[\"판매량\"])/3\nselling_avg\n\n25.0\n\n\n\n\n(p115) mpg 데이터를 이용해 분석 문제를 해결해보세요.\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\ndf_mpg = pd.read_csv('data/mpg.csv')\ndf_mpg_copy = df_mpg.copy()\nprint(df_mpg_copy)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n    category  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_mpg_copy = df_mpg_copy.rename(columns = {'cty' : 'city'})\ndf_mpg_copy = df_mpg_copy.rename(columns = {'hwy' : 'highway'})\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_mpg_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n\n(p130) [분석 도전]\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmwt = pd.read_csv('data/midwest.csv')\nmwt.head()  #데이터 앞부분\nmwt.tail()  #데이터 뒷부분\nmwt.shape   #행, 열 수\nmwt.info()  #속성\nmwt.describe()  #요약 통계량\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmwt = mwt.rename(columns = {'poptotal' : 'total'})\nmwt = mwt.rename(columns = {'popasian' : 'asian'})\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmwt['asian_percentage'] = (mwt['asian'] / mwt['total']) * 100 #파생변수 추가\nmwt['asian_percentage'].plot.hist()\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ’large;, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nmean_asian_percentage = np.mean(mwt['asian_percentage'])\n\n#평균 초과하면 'large', 그 외에는 'small' 부여\nmwt['average standard'] = np.where(mwt['asian_percentage'] &gt; mean_asian_percentage,'large', 'small')\n\nQ5. ‘large’와 ’small’ 에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nmwt['average standard'].value_counts()\n\ncount_test = mwt['average standard'].value_counts()\ncount_test.plot.bar(rot = 0)"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "과제 목록",
    "section": "",
    "text": "LS 빅데이터 스쿨 HW4\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\n지윤\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 HW3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\n지윤\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 HW2.5\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\n지윤\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 HW2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\n지윤\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 HW1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\n지윤\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "LS 빅데이터 스쿨 HW3",
    "section": "",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그릴 것. (def 사용)\n\n#기본 코드 \n#terminal에 쳐주고 시작하기 -&gt; pip install pandas\nimport pandas as pd \nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\n#정규분포 pdf -&gt; norm.pdf(x, mu, sigma) \n\ndef normal_pdf(x, mu, sigma) : \n    \"정규분포의 pdf를 계산하는 함수 \\\n    #loc -&gt; mu \\\n    #scale -&gt; sigma\"\n    \n    return (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))\n    \nmu = 3\nsigma = 2\n\nx = np.linspace(-10, 10, 100)\npdf = normal_pdf(x, mu, sigma)\n\n#그래프\nplt.plot(x, pdf, color = \"blue\")\nplt.xlabel('x')\nplt.ylabel('PDF')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\nX ~ N(2, 3^2) 1) P(X &lt; 3) 2) P(2 &lt; X &lt; 5) 3) P(X &lt; 3 or X&lt;7)\n\n#X ~ N() -&gt; norm.rvs\n#X ~ N(2, 3^2) -&gt; norm.rvs(loc = 2, scale = 3, size = 1) \n\n#1) P(X &lt; 3)\n#norm.rvs(loc = 2, scale = 3, size = 1) \na = norm.cdf(3, 2, 3)\na\n\nnp.float64(0.6305586598182363)\n\n\n\n#2) P(2 &lt; X &lt; 5)\nb = norm.cdf(5, 2, 3)\nc = norm.cdf(2, 2, 3)\nb-c\n\nnp.float64(0.3413447460685429)\n\n\n\n#3) P(X &lt; 3 or X&lt;7)\nd = norm.cdf(3, 2, 3)\ne = norm.cdf(7, 2, 3)\nd + (1-e)\n\nnp.float64(0.678349012091051)\n\n\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?\n\n#평균이 30, 분산이 4, 표준편차가 2 \nloc = 30\nscale = 2\n\nx = norm.ppf(0.95, loc, scale)\nx\n\nnp.float64(33.28970725390295)"
  },
  {
    "objectID": "posts/hw2.5/index.html",
    "href": "posts/hw2.5/index.html",
    "title": "LS 빅데이터 스쿨 HW2.5",
    "section": "",
    "text": "Do it! 쉽게 배우는 파이썬 데이터 분석\n\n(p204) mpg데이터와 midwest데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. mpg데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\n#!pip install pandas\n#!pip install seaborn\nimport pandas as pd \nmpg = pd.read_csv('data/mpg.csv')\n\n#x축은 cty, y축은 hwy를 나타낸 산점도 만들기 \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy')\nplt.show()\n\n\n\n\n\n\n\n\nQ2. 미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nplt.clf()\n\nmidwest = pd.read_csv('data/midwest.csv')\n\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian') \\\n    .set(xlim = [0, 500000], ylim = [0, 10000])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n(p211) mpg데이터를 이용해 분석 문제를 해결해 보세요.\nQ1. 어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nplt.clf()\nmpg = pd.read_csv('data/mpg.csv')\ndf_mpg = mpg.query('category == \"suv\"') \\\n            .groupby('manufacturer', as_index = False) \\\n            .agg(mean_cty = ('cty', 'mean')) \\\n            .sort_values('mean_cty', ascending = False) \\\n            .head()\ndf_mpg\n\nsns.barplot(data = df_mpg, x = 'manufacturer', y = 'mean_cty')\nplt.show()\n\n\n\n\n\n\n\n\nQ2. 자동차 중에서 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nplt.clf()\n\ndf_mpg = mpg.groupby('category', as_index = False) \\\n            .agg(n = ('category', 'count'))\ndf_mpg\n\nsns.barplot(data = df_mpg, x = 'category', y = 'n', \\\n            order = mpg['category'].value_counts().index)\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "LS 빅데이터 스쿨 HW4",
    "section": "",
    "text": "표본 분산 계산 시 왜 n-1로 나누는지 알아보도록 하겠습니다.\n(기본코드)\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nfrom scipy.stats import uniform\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\n\n\n\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\n\nnp.random.seed(20240729) #시드 설정 \nx = uniform.rvs(loc = 3, scale = 7, size = 20*10000).reshape(-1,20) \n#x_bar = x.mean()\n\n#s_2 : n-1로 나눈 표본 분산\ns_2 = x.var(axis = 1, ddof=1) \n\n#그래프 그리기 \nplt.hist(s_2, color = \"lightblue\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#k_2 : n으로 나눈 모분산 \nk_2 = x.var(axis = 1, ddof=0) \n\n#그래프 그리기 \nplt.hist(k_2, color = \"orange\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\n#s_2 분포 그래프 \nplt.hist(s_2, color = \"lightblue\")\nplt.axvline(x.var(), color = 'green', linestyle = '--', linewidth=3)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#k_2 분포 그래프 \nplt.hist(k_2, color = \"orange\")\nplt.axvline(x.var(), color = 'green', linestyle = '--', linewidth=3)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\n\nn-1로 나눈 표본 분산은 n으로 나눈 표본 분산보다 값이 모집단과 더 유사하게 나옵니다. 실제로 그래프로 확인했을 때, 모분산의 위치가 n으로 나눈 그래프보다 n-1로 나눈 그래프가 값의 평균에 더 가까이 위치하고 있음을 확인할 수 있습니다."
  },
  {
    "objectID": "posts/hw4/index.html#번",
    "href": "posts/hw4/index.html#번",
    "title": "LS 빅데이터 스쿨 HW4",
    "section": "",
    "text": "n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\n\nnp.random.seed(20240729) #시드 설정 \nx = uniform.rvs(loc = 3, scale = 7, size = 20*10000).reshape(-1,20) \n#x_bar = x.mean()\n\n#s_2 : n-1로 나눈 표본 분산\ns_2 = x.var(axis = 1, ddof=1) \n\n#그래프 그리기 \nplt.hist(s_2, color = \"lightblue\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#k_2 : n으로 나눈 모분산 \nk_2 = x.var(axis = 1, ddof=0) \n\n#그래프 그리기 \nplt.hist(k_2, color = \"orange\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#번-1",
    "href": "posts/hw4/index.html#번-1",
    "title": "LS 빅데이터 스쿨 HW4",
    "section": "",
    "text": "각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\n#s_2 분포 그래프 \nplt.hist(s_2, color = \"lightblue\")\nplt.axvline(x.var(), color = 'green', linestyle = '--', linewidth=3)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#k_2 분포 그래프 \nplt.hist(k_2, color = \"orange\")\nplt.axvline(x.var(), color = 'green', linestyle = '--', linewidth=3)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#번-2",
    "href": "posts/hw4/index.html#번-2",
    "title": "LS 빅데이터 스쿨 HW4",
    "section": "",
    "text": "결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\n\nn-1로 나눈 표본 분산은 n으로 나눈 표본 분산보다 값이 모집단과 더 유사하게 나옵니다. 실제로 그래프로 확인했을 때, 모분산의 위치가 n으로 나눈 그래프보다 n-1로 나눈 그래프가 값의 평균에 더 가까이 위치하고 있음을 확인할 수 있습니다."
  }
]